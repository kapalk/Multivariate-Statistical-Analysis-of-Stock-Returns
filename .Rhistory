# compute log-returns from adjacent prices
DailyReturnsData <- as.data.frame(apply(DailyAdjPriceData,2,calculateLogReturns))
names(DailyReturnsData) <- DJIA_symbols
# add log return of the whole index
# DailyReturnsData['DJIA'] <- rowMeans(DailyReturnsData)
# write.csv(DailyReturnsData,'returns_data')
View(DailyAdjPriceData)
setwd(paste("~/Documents/Koulu/Multivarite Statistical Analysis",
"/Multivariate-Statistical-Analysis-of-Stock-Returns/Multi",sep = ""))
rm(list = ls())
library(fImport)
library(Hmisc)
getStockAdjacentPriceData <- function(stock_symbols, end, start=Sys.timeDate()){
# get data from yahoo finance and delete unnecessary data
df <- as.data.frame(yahooSeries(stock_symbols,from = start,to = end))
colIndices <- seq(1,ncol(df),by = 1)
removeIndices <- colIndices[-seq(6,ncol(df),by = 6)]
df <- df[,-removeIndices]
return(df)
}
calculateLogReturns <- function(x){
return(log(x / Lag(x,shift = 1))[2:length(x)])
}
cleanData <- function(df){
df <- df[,!colSums(is.na(df)) > 0]
return(df)
}
DJIA_symbols <- read.csv('OMX25_symbols',sep = '\n',header = FALSE)
DJIA_symbols <- c(paste0("",unlist(DJIA_symbols)),'^OMXH25')
start <- as.Date('2010-1-8')
end <- as.Date('2017-2-1')
DailyAdjPriceData <- getStockAdjacentPriceData(DJIA_symbols,end,start)
start <- as.Date('2014-1-1')
end <- as.Date('2017-1-1')
DailyAdjPriceData <- getStockAdjacentPriceData(DJIA_symbols,end,start)
df <- as.data.frame(yahooSeries('AMEAS',from = start,to = end))
df <- as.data.frame(yahooSeries('ELISA',from = start,to = end))
df <- as.data.frame(yahooSeries('MMM',from = start,to = end))
setwd(paste("~/Documents/Koulu/Multivarite Statistical Analysis",
"/Multivariate-Statistical-Analysis-of-Stock-Returns/Multi",sep = ""))
rm(list = ls())
# install.packages('fImport')
# install.packages('Hmisc')
library(fImport)
library(Hmisc)
getStockAdjacentPriceData <- function(stock_symbols, end, start=Sys.timeDate()){
# get data from yahoo finance and delete unnecessary data
df <- as.data.frame(yahooSeries(stock_symbols,from = start,to = end))
colIndices <- seq(1,ncol(df),by = 1)
removeIndices <- colIndices[-seq(6,ncol(df),by = 6)]
df <- df[,-removeIndices]
return(df)
}
calculateLogReturns <- function(x){
return(log(x / Lag(x,shift = 1))[2:length(x)])
}
cleanData <- function(df){
df <- df[,!colSums(is.na(df)) > 0]
return(df)
}
# get tickers of DJIA companies
DJIA_symbols <- read.csv('DJIA_symbols',sep = '\n',header = FALSE)
DJIA_symbols <- c(paste0("",unlist(DJIA_symbols)),'^DJI')
# get data
start <- as.Date('2015-3-18')
end <- as.Date('2017-2-19')
DailyAdjPriceData <- getStockAdjacentPriceData(DJIA_symbols,end,start)
# use tickers as colnames
names(DailyAdjPriceData) <- DJIA_symbols
# Delete col with NA values
DailyAdjPriceData <- cleanData(DailyAdjPriceData)
# Delete dropped col ticker
DJIA_symbols <- DJIA_symbols[is.element(DJIA_symbols,colnames(DailyAdjPriceData))]
# write.csv(DailyAdjPriceData,'price_data')
# compute log-returns from adjacent prices
DailyReturnsData <- as.data.frame(apply(DailyAdjPriceData,2,calculateLogReturns))
names(DailyReturnsData) <- DJIA_symbols
# add log return of the whole index
DailyReturnsData['DJIA'] <- rowMeans(DailyReturnsData)
# write.csv(DailyReturnsData,'returns_data')
View(DailyAdjPriceData)
View(DailyReturnsData)
setwd(paste("~/Documents/Koulu/Multivarite Statistical Analysis",
"/Multivariate-Statistical-Analysis-of-Stock-Returns/Multi",sep = ""))
rm(list = ls())
# install.packages('fImport')
# install.packages('Hmisc')
library(fImport)
library(Hmisc)
getStockAdjacentPriceData <- function(stock_symbols, end, start=Sys.timeDate()){
# get data from yahoo finance and delete unnecessary data
df <- as.data.frame(yahooSeries(stock_symbols,from = start,to = end))
colIndices <- seq(1,ncol(df),by = 1)
removeIndices <- colIndices[-seq(6,ncol(df),by = 6)]
df <- df[,-removeIndices]
return(df)
}
calculateLogReturns <- function(x){
return(log(x / Lag(x,shift = 1))[2:length(x)])
}
cleanData <- function(df){
df <- df[,!colSums(is.na(df)) > 0]
return(df)
}
# get tickers of DJIA companies
DJIA_symbols <- read.csv('DJIA_symbols',sep = '\n',header = FALSE)
DJIA_symbols <- c(paste0("",unlist(DJIA_symbols)),'^DJI')
# get data
start <- as.Date('2015-3-18')
end <- as.Date('2017-2-19')
DailyAdjPriceData <- getStockAdjacentPriceData(DJIA_symbols,end,start)
# use tickers as colnames
names(DailyAdjPriceData) <- DJIA_symbols
# Delete col with NA values
# DailyAdjPriceData <- cleanData(DailyAdjPriceData)
# Delete dropped col ticker
DJIA_symbols <- DJIA_symbols[is.element(DJIA_symbols,colnames(DailyAdjPriceData))]
write.csv(DailyAdjPriceData,'price_data')
# compute log-returns from adjacent prices
DailyReturnsData <- as.data.frame(apply(DailyAdjPriceData,2,calculateLogReturns))
names(DailyReturnsData) <- DJIA_symbols
# add log return of the whole index
write.csv(DailyReturnsData,'returns_data')
setwd(paste("~/Documents/Koulu/Multivarite Statistical Analysis",
"/Multivariate-Statistical-Analysis-of-Stock-Returns",sep = ""))
rm(list = ls())
library(ggplot2)
library(factoextra)
returns <- read.csv('returns_data',header = TRUE, row.names = 1)
djia_index <- length(returns)
pca.returns <- prcomp(returns[,-djia_index],center = T, scale. = T)
score1 <- scale(pca.returns$x)[,1]
fviz_screeplot(pca.returns,ncp = 29,choice = 'variance')
summary(pca.returns)
pca.returns$rotation
djiaCumulativeReturn <- 100 * exp(cumsum(returns[,djia_index]))
pcaCumulativeReturn <- 100 * exp(cumsum(score1 *
sd(returns[,djia_index])))
dates <- as.Date(row.names(returns),format = "%Y-%m-%d")
plotDF1 <- data.frame(dates,pcaCumulativeReturn,djiaCumulativeReturn)
colnames(plotDF1) <- c('date','pca','index')
g <- ggplot(plotDF1, aes(x = date)) +
geom_line(aes(y=pca,colour = 'PCA')) +
geom_line(aes(y=index,colour = 'DJIA')) +
scale_colour_manual(values=c("orange", "black")) +
labs(y = 'Cumulative Return',x = 'Year')
g
plotDF3 <- data.frame(row.names(pca.returns$rotation),
pca.returns$rotation,row.names = NULL)
colnames(plotDF3) <- c('ticker',colnames(pca.returns$rotation))
h <- ggplot(plotDF3, aes(x = ticker,y = PC3))+
geom_bar(stat = "identity",color = "black",fill = "steelblue")
h
h <- ggplot(plotDF3, aes(x = ticker,y = PC1))+
geom_bar(stat = "identity",color = "black",fill = "steelblue")
h
x = mean(score1)
y = mean(returns[,1])
plotDF2 <- data.frame(score1,returns[,djia_index])
colnames(plotDF2) <- c('score1','djia')
p <- ggplot(plotDF2, aes(x = score1))+
geom_point(aes(y = djia))
geom_line(aes(y = eigenvector1))
p
setwd(paste("~/Documents/Koulu/Multivarite Statistical Analysis",
"/Multivariate-Statistical-Analysis-of-Stock-Returns/Multi",sep = ""))
rm(list = ls())
# install.packages('fImport')
# install.packages('Hmisc')
library(fImport)
library(Hmisc)
getStockAdjacentPriceData <- function(stock_symbols, end, start=Sys.timeDate()){
# get data from yahoo finance and delete unnecessary data
df <- as.data.frame(yahooSeries(stock_symbols,from = start,to = end))
colIndices <- seq(1,ncol(df),by = 1)
removeIndices <- colIndices[-seq(6,ncol(df),by = 6)]
df <- df[,-removeIndices]
return(df)
}
calculateLogReturns <- function(x){
return(log(x / Lag(x,shift = 1))[2:length(x)])
}
cleanData <- function(df){
df <- df[,!colSums(is.na(df)) > 0]
return(df)
}
# get tickers of DJIA companies
DJIA_symbols <- read.csv('DJIA_symbols',sep = '\n',header = FALSE)
DJIA_symbols <- c(paste0("",unlist(DJIA_symbols)),'^DJI')
# get data
start <- as.Date('2015-3-19')
end <- as.Date('2017-2-19')
DailyAdjPriceData <- getStockAdjacentPriceData(DJIA_symbols,end,start)
# use tickers as colnames
names(DailyAdjPriceData) <- DJIA_symbols
# Delete col with NA values
# DailyAdjPriceData <- cleanData(DailyAdjPriceData)
# Delete dropped col ticker
DJIA_symbols <- DJIA_symbols[is.element(DJIA_symbols,colnames(DailyAdjPriceData))]
write.csv(DailyAdjPriceData,'price_data')
# compute log-returns from adjacent prices
DailyReturnsData <- as.data.frame(apply(DailyAdjPriceData,2,calculateLogReturns))
names(DailyReturnsData) <- DJIA_symbols
# add log return of the whole index
write.csv(DailyReturnsData,'returns_data')
View(DailyReturnsData)
View(DailyAdjPriceData)
summary(DailyAdjPriceData)
View(DailyReturnsData)
setwd(paste("~/Documents/Koulu/Multivarite Statistical Analysis",
"/Multivariate-Statistical-Analysis-of-Stock-Returns",sep = ""))
rm(list = ls())
library(ggplot2)
library(factoextra)
returns <- read.csv('returns_data',header = TRUE, row.names = 1)
# PCA
djia_index <- length(returns)
pca.returns <- prcomp(returns[,-djia_index],center = T, scale. = T)
score1 <- scale(pca.returns$x)[,1]
fviz_screeplot(pca.returns,ncp = 29,choice = 'variance')
summary(pca.returns)
pca.returns$rotation
# Visualize cumulative return when only first principle component is interpreted
djiaCumulativeReturn <- 100 * exp(cumsum(returns[,djia_index]))
pcaCumulativeReturn <- 100 * exp(cumsum(score1 *
sd(returns[,djia_index])))
dates <- as.Date(row.names(returns),format = "%Y-%m-%d")
plotDF1 <- data.frame(dates,pcaCumulativeReturn,djiaCumulativeReturn)
colnames(plotDF1) <- c('date','pca','index')
g <- ggplot(plotDF1, aes(x = date)) +
geom_line(aes(y=pca,colour = 'PCA')) +
geom_line(aes(y=index,colour = 'DJIA')) +
scale_colour_manual(values=c("orange", "black")) +
labs(y = 'Cumulative Return',x = 'Year')
g
# visualize loadings
plotDF3 <- data.frame(row.names(pca.returns$rotation),
pca.returns$rotation,row.names = NULL)
colnames(plotDF3) <- c('ticker',colnames(pca.returns$rotation))
h <- ggplot(plotDF3, aes(x = ticker,y = PC1))+
geom_bar(stat = "identity",color = "black",fill = "steelblue")
h
# visualize data scatter and direction of first principal component's eigenvector
x = mean(score1)
y = mean(returns[,1])
plotDF2 <- data.frame(score1,returns[,djia_index])
colnames(plotDF2) <- c('score1','djia')
p <- ggplot(plotDF2, aes(x = score1))+
geom_point(aes(y = djia))
geom_line(aes(y = eigenvector1))
pca.returns$rotation
h <- ggplot(plotDF3, aes(x = ticker,y = PC2))+
geom_bar(stat = "identity",color = "black",fill = "steelblue")
h
setwd("~/Documents/Koulu/Multivarite Statistical Analysis")
data = read.table("DECATHLON.txt",header = TRUE,row.names = 1)
help("princomp")
newdata = data[,-c(1,12,13)]
plot(newdata)
plot(newdata$R100m, newdata$R400m, xlab = "Running 100m", ylab = "Running 400m", type = "n")
text(newdata$R100m,newdata$R400m,labels = rownames(newdata))
pca = princomp(newdata, cor = FALSE) # covariance base
summary(pca) # variance explained
pca$loadings[,1:4]
colMeans(pca$scores)
cov(pca$scores)
colMeans(pca.returns$x)
setwd("~/Documents/Koulu/Multivarite Statistical Analysis")
library('corrgram')
rm(list = ls())
data = read.table('DECATHLON.txt',header = TRUE,row.names = 1)
newdata = data[,-c(1,13,14)]
corrgram(newdata)
View(newdata)
dev.off()
nd_pca_cor = princomp(newdata,cor = TRUE)
nd_pca_cov = princomp(newdata)
summary(nd_pca_cor)
plot(nd_pca_cor)
y_cor = nd_pca_cor$scores[,1:8]
y_cov = nd_pca_cov$scores[,1:8]
par(mfrow = c(1,2))
plot(y_cov[,1],y_cov[,2],type = 'n',xlab = 'strength',ylab = 'speed')
text(y_cov[,1:2],labels = row.names(data))
plot(y_cor[,1],y_cor[,2],type = 'n',xlab = 'strength',ylab = 'speed')
text(y_cor[,1:2],labels = row.names(data))
k <- 3
newdata[49,] <- c(rep(1200, k), rep(800, 10-k))
rownames(newdata)[49] = 'outlier'
DEC.PCA.outlier = princomp(newdata,cor = TRUE)
DEC.PCA.outlier$loadings
plot(DEC.PCA.outlier$scores[,1],DEC.PCA.outlier$scores[,2])
setwd(paste("~/Documents/Koulu/Multivarite Statistical Analysis",
"/Multivariate-Statistical-Analysis-of-Stock-Returns",sep = ""))
rm(list = ls())
library(ggplot2)
library(factoextra)
returns <- read.csv('returns_data',header = TRUE, row.names = 1)
djia_index <- length(returns)
pca.returns <- prcomp(returns[,-djia_index],center = T, scale. = T)
score1 <- scale(pca.returns$x)[,1]
fviz_screeplot(pca.returns,ncp = 29,choice = 'variance')
summary(pca.returns)
pca.returns$rotation
corrgram(returns)
djiaCumulativeReturn <- 100 * exp(cumsum(returns[,djia_index]))
setwd("~/Documents/Koulu/Multivarite Statistical Analysis")
library('corrgram')
rm(list = ls())
data = read.table('DECATHLON.txt',header = TRUE,row.names = 1)
newdata = data[,-c(1,13,14)]
corrgram(newdata)
setwd(paste("~/Documents/Koulu/Multivarite Statistical Analysis",
"/Multivariate-Statistical-Analysis-of-Stock-Returns",sep = ""))
rm(list = ls())
library(ggplot2)
library(factoextra)
returns <- read.csv('returns_data',header = TRUE, row.names = 1)
djia_index <- length(returns)
pca.returns <- prcomp(returns[,-djia_index],center = T, scale. = T)
score1 <- scale(pca.returns$x)[,1]
fviz_screeplot(pca.returns,ncp = 29,choice = 'variance')
summary(pca.returns)
pca.returns$rotation
corrgram(returns)
corrgram(returns)
setwd(paste("~/Documents/Koulu/Multivarite Statistical Analysis",
"/Multivariate-Statistical-Analysis-of-Stock-Returns",sep = ""))
rm(list = ls())
library(ggplot2)
library(factoextra)
returns <- read.csv('returns_data',header = TRUE, row.names = 1)
djia_index <- length(returns)
pca.returns <- prcomp(returns[,-djia_index],center = T, scale. = T)
score1 <- scale(pca.returns$x)[,1]
fviz_screeplot(pca.returns,ncp = 29,choice = 'variance')
summary(pca.returns)
summary(returns)
a <- read.csv2('price_data',header = T,row.names = 1)
a <- read.table('price_data',header = T,row.names = 1)
View(a)
a <- read.csv('price_data',header = T,row.names = 1)
summary(a)
setwd(paste("~/Documents/Koulu/Multivarite Statistical Analysis",
"/Multivariate-Statistical-Analysis-of-Stock-Returns",sep = ""))
rm(list = ls())
library(ggplot2)
library(factoextra)
returns <- read.csv('returns_data',header = TRUE, row.names = 1)
write.csv(summary(returns),'summary_price')
a <- read.csv('price_data',header = T,row.names = 1)
a <- read.csv('price_data.csv',header = T,row.names = 1)
View(a)
write.csv(summary(a),'summary_price')
write.csv(summary(a),'summary_price.csv')
View(a)
setwd(paste("~/Documents/Koulu/Multivarite Statistical Analysis",
"/Multivariate-Statistical-Analysis-of-Stock-Returns",sep = ""))
rm(list = ls())
library(ggplot2)
library(factoextra)
returns <- read.csv('returns_data',header = TRUE, row.names = 1)
djia_index <- length(returns)
pca.returns <- prcomp(returns[,-djia_index],center = T, scale. = T)
score1 <- scale(pca.returns$x)[,1]
fviz_screeplot(pca.returns,ncp = 29,choice = 'variance')
summary(pca.returns)
pca.returns$rotation
djiaCumulativeReturn <- 100 * exp(cumsum(returns[,djia_index]))
pcaCumulativeReturn <- 100 * exp(cumsum(score1 *
sd(returns[,djia_index])))
dates <- as.Date(row.names(returns),format = "%Y-%m-%d")
plotDF1 <- data.frame(dates,pcaCumulativeReturn,djiaCumulativeReturn)
colnames(plotDF1) <- c('date','pca','index')
g <- ggplot(plotDF1, aes(x = date)) +
geom_line(aes(y=pca,colour = 'PCA')) +
geom_line(aes(y=index,colour = 'DJIA')) +
scale_colour_manual(values=c("orange", "black")) +
labs(y = 'Cumulative Return',x = 'Year')
g
pcaCumulativeReturn <- -100 * exp(cumsum(score1 *
sd(returns[,djia_index])))
dates <- as.Date(row.names(returns),format = "%Y-%m-%d")
plotDF1 <- data.frame(dates,pcaCumulativeReturn,djiaCumulativeReturn)
colnames(plotDF1) <- c('date','pca','index')
g <- ggplot(plotDF1, aes(x = date)) +
geom_line(aes(y=pca,colour = 'PCA')) +
geom_line(aes(y=index,colour = 'DJIA')) +
scale_colour_manual(values=c("orange", "black")) +
labs(y = 'Cumulative Return',x = 'Year')
g
djia_index <- length(returns)
pca.returns <- prcomp(returns[,-djia_index],center = T, scale. = T)
score1 <- scale(pca.returns$x)[,1]
fviz_screeplot(pca.returns,ncp = 29,choice = 'variance')
summary(pca.returns)
pca.returns$rotation
djiaCumulativeReturn <- 100 * exp(cumsum(returns[,djia_index]))
pcaCumulativeReturn <- 100 * exp(cumsum(-score1 *
sd(returns[,djia_index])))
dates <- as.Date(row.names(returns),format = "%Y-%m-%d")
plotDF1 <- data.frame(dates,pcaCumulativeReturn,djiaCumulativeReturn)
colnames(plotDF1) <- c('date','pca','index')
g <- ggplot(plotDF1, aes(x = date)) +
geom_line(aes(y=pca,colour = 'PCA')) +
geom_line(aes(y=index,colour = 'DJIA')) +
scale_colour_manual(values=c("orange", "black")) +
labs(y = 'Cumulative Return',x = 'Year')
g
plotDF3 <- data.frame(row.names(pca.returns$rotation),
pca.returns$rotation,row.names = NULL)
colnames(plotDF3) <- c('ticker',colnames(pca.returns$rotation))
h <- ggplot(plotDF3, aes(x = ticker,y = PC2))+
geom_bar(stat = "identity",color = "black",fill = "steelblue")
h
h <- ggplot(plotDF3, aes(x = ticker,y = PC1))+
geom_bar(stat = "identity",color = "black",fill = "steelblue")
h
labs(x = 'Company Ticker')
h
h <- ggplot(plotDF3, aes(x = ticker,y = PC1))+
geom_bar(stat = "identity",color = "black",fill = "steelblue")
labs(x = 'Company Ticker')
h
plotDF3 <- data.frame(row.names(pca.returns$rotation),
pca.returns$rotation,row.names = NULL)
colnames(plotDF3) <- c('ticker',colnames(pca.returns$rotation))
h <- ggplot(plotDF3, aes(x = ticker,y = PC1))+
geom_bar(stat = "identity",color = "black",fill = "steelblue")
h <- ggplot(plotDF3, aes(x = ticker,y = PC1))+
geom_bar(stat = "identity",color = "black",fill = "steelblue")
labs(x = 'Company Ticker')
h
h <- ggplot(plotDF3, aes(x = ticker,y = PC1))+
geom_bar(stat = "identity",color = "black",fill = "steelblue") +
theme(text = element_text(size=20),
axis.text.x = element_text(angle=90, hjust=1))
h <- ggplot(plotDF3, aes(x = ticker,y = PC1))+
geom_bar(stat = "identity",color = "black",fill = "steelblue") +
theme(text = element_text(size=20),
axis.text.x = element_text(angle=90, hjust=1))
h
h <- ggplot(plotDF3, aes(x = ticker,y = PC1))+
geom_bar(stat = "identity",color = "black",fill = "steelblue") +
theme(text = element_text(size=15),
axis.text.x = element_text(angle=90, hjust=1))
h
h <- ggplot(plotDF3, aes(x = ticker,y = PC1)) +
geom_bar(stat = "identity",color = "black",fill = "steelblue") +
labs(x = 'Company') +
theme(text = element_text(size=15),
axis.text.x = element_text(angle=90, hjust=1))
h
h1 <- ggplot(plotDF3, aes(x = ticker,y = PC1)) +
geom_bar(stat = "identity",color = "black",fill = "steelblue") +
labs(x = 'Company') +
theme(text = element_text(size=15),
axis.text.x = element_text(angle=90, hjust=1))
h2 <- ggplot(plotDF3, aes(x = ticker,y = PC2)) +
geom_bar(stat = "identity",color = "black",fill = "steelblue") +
labs(x = 'Company') +
theme(text = element_text(size=15),
axis.text.x = element_text(angle=90, hjust=1))
multiplot(h1,h2)
source('multiplot.R')
multiplot(h1,h2)
pca.returns$rotation
h1 <- ggplot(plotDF3, aes(x = ticker,y = PC1)) +
geom_bar(stat = "identity",color = "black",fill = "steelblue") +
labs(x = 'Company') +
theme(text = element_text(size=5),
axis.text.x = element_text(angle=90, hjust=1))
h2 <- ggplot(plotDF3, aes(x = ticker,y = PC2)) +
geom_bar(stat = "identity",color = "black",fill = "steelblue") +
labs(x = 'Company') +
theme(text = element_text(size=5),
axis.text.x = element_text(angle=90, hjust=1))
multiplot(h1,h2)
h1 <- ggplot(plotDF3, aes(x = ticker,y = PC1)) +
geom_bar(stat = "identity",color = "black",fill = "steelblue") +
labs(x = 'Company') +
theme(text = element_text(size=10),
axis.text.x = element_text(angle=90, hjust=1))
h2 <- ggplot(plotDF3, aes(x = ticker,y = PC2)) +
geom_bar(stat = "identity",color = "black",fill = "steelblue") +
labs(x = 'Company') +
theme(text = element_text(size=10),
axis.text.x = element_text(angle=90, hjust=1))
multiplot(h1,h2)
pca.returns$rotation
h1 <- ggplot(plotDF3, aes(x = ticker,y = PC3)) +
geom_bar(stat = "identity",color = "black",fill = "steelblue") +
labs(x = 'Company') +
theme(text = element_text(size=10),
axis.text.x = element_text(angle=90, hjust=1))
h2 <- ggplot(plotDF3, aes(x = ticker,y = PC4)) +
geom_bar(stat = "identity",color = "black",fill = "steelblue") +
labs(x = 'Company') +
theme(text = element_text(size=10),
axis.text.x = element_text(angle=90, hjust=1))
multiplot(h1,h2)
h1 <- ggplot(plotDF3, aes(x = ticker,y = PC5)) +
geom_bar(stat = "identity",color = "black",fill = "steelblue") +
labs(x = 'Company') +
theme(text = element_text(size=10),
axis.text.x = element_text(angle=90, hjust=1))
h2 <- ggplot(plotDF3, aes(x = ticker,y = PC6)) +
geom_bar(stat = "identity",color = "black",fill = "steelblue") +
labs(x = 'Company') +
theme(text = element_text(size=10),
axis.text.x = element_text(angle=90, hjust=1))
multiplot(h1,h2)
